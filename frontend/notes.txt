✅ Goal of this Phase
Set up a pro-level project architecture.
Use the latest and most efficient tools for better developer experience and productivity.
Implement a proper folder structure from the beginning.
Configure Tailwind CSS for rapid styling and consistency.
Add ESLint & Prettier for code consistency and linting.

💡 📌 Tech Stack & Tools
✅ Frontend: React + Vite
✅ Styling: Tailwind CSS (for a modern, responsive UI)
✅ State Management: Redux Toolkit
✅ Data Fetching: Axios
✅ AI Tools:

Code GPT: For code explanations and instant fixes.
Zustand Inspector: For Redux state visualization.
✅ Extensions:
ESLint + Prettier → For consistent code formatting.
Tailwind IntelliSense → For Tailwind autocomplete and previews.
✅ Testing:
Jest + React Testing Library (in later phases for unit tests).



🚀 1️⃣ Initializing the Project
✅ We'll use Vite instead of Create React App for better performance and faster build times.

🔹 Step 1: Create Vite + React Project
bash
Copy
Edit
npm create vite@latest frontend -- --template react
cd frontend
✅ Install dependencies:

bash
Copy
Edit
npm install
✅ Install essential packages:

bash
Copy
Edit
npm install react-router-dom axios @reduxjs/toolkit react-redux
✅ Install Tailwind CSS:

bash
Copy
Edit
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
✅ Enable Tailwind in tailwind.config.js:

javascript
Copy
Edit
// tailwind.config.js
export default {
  content: ["./index.html", "./src/**/*.{js,jsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
};
✅ Configure index.css:

css
Copy
Edit
@tailwind base;
@tailwind components;
@tailwind utilities;
🔥 2️⃣ Folder Structure & Architecture
✅ Goal: Create a modular, scalable structure from the start for clean and maintainable code.

csharp
Copy
Edit
📁 frontend
 ├── 📁 public          # Static assets
 ├── 📁 src
 │   ├── 📁 assets      # Images, icons, styles
 │   ├── 📁 components  # Reusable components
 │   │       ├── Navbar.jsx
 │   │       ├── Sidebar.jsx
 │   │       ├── StatsCard.jsx
 │   │       ├── Chart.jsx
 │   │       ├── ActivityTable.jsx
 │   ├── 📁 pages       # Main pages
 │   │       ├── Dashboard.jsx
 │   │       ├── ActivityLog.jsx
 │   │       ├── Settings.jsx
 │   ├── 📁 store       # Redux state management
 │   │       ├── activitySlice.js
 │   │       ├── store.js
 │   ├── 📁 hooks       # Custom hooks
 │   │       ├── useFetchActivities.js
 │   ├── 📁 utils       # Helper functions
 │   │       ├── api.js
 │   │       ├── dateFormatter.js
 │   ├── App.jsx
 │   ├── main.jsx
 │── tailwind.config.js
 │── package.json
 │── .eslintrc.json      # Linter configuration
 │── .prettierrc.json    # Code formatting rules
✅ 3️⃣ Linting & Code Formatting
💡 Why use ESLint & Prettier?

Enforces consistent code style.
Catches potential bugs and issues.
Improves readability and maintainability.
🔹 Install ESLint & Prettier
bash
Copy
Edit
npm install -D eslint prettier eslint-plugin-react eslint-config-prettier eslint-plugin-prettier
🔹 Create .eslintrc.json
json
Copy
Edit
{
  "env": {
    "browser": true,
    "es2021": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "prettier"
  ],
  "plugins": ["react", "prettier"],
  "rules": {
    "prettier/prettier": ["error"],
    "react/prop-types": "off",
    "no-unused-vars": "warn"
  }
}
🔹 Create .prettierrc.json
json
Copy
Edit
{
  "semi": true,
  "singleQuote": false,
  "tabWidth": 2,
  "trailingComma": "es5"
}
✅ Add formatting scripts in package.json:

json
Copy
Edit
"scripts": {
  "lint": "eslint ./src --ext .js,.jsx",
  "format": "prettier --write ./src"
}
🛠️ 4️⃣ Global Styles & Theme Configuration
💡 Why?

Maintain a consistent UI theme with reusable Tailwind classes.
Use CSS variables for color consistency.
✅ src/assets/styles.css:

css
Copy
Edit
:root {
  --primary-color: #4f46e5;
  --secondary-color: #22c55e;
  --text-color: #374151;
}

@layer base {
  body {
    @apply bg-gray-50 text-gray-800;
  }

  h1, h2, h3, h4, h5 {
    @apply font-bold;
  }

  button {
    @apply bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition;
  }
}
🔥 5️⃣ AI Tools for Development
🚀 Recommended Tools
Code GPT (VS Code Extension)
Provides code explanations and auto-fixes directly in the IDE.
Zustand Inspector
Inspects Redux state visually for easy debugging.
Tailwind IntelliSense
Autocompletes Tailwind classes with real-time previews.
✅ Install them in VS Code to boost productivity.

✅ 6️⃣ Running the Project
Start the project with:

bash
Copy
Edit
npm run dev
Your frontend should be up and running at:
👉 http://localhost:5173

🚀 🎯 Phase 1 Achievements
✅ Pro-level project structure → Scalable and modular.
✅ Tailwind CSS → Rapid styling with reusable components.
✅ ESLint & Prettier → Code quality enforcement.
✅ AI Tools → Faster development with assistance.




🎯 🔥 Phase 2: State Management with Redux
✅ Goal of this Phase
Integrate Redux Toolkit (RTK) for centralized and optimized state management.

Use Redux Thunks to handle asynchronous operations for fetching data.

Store, update, and manage app activity data efficiently.

Structure the Redux store cleanly with slices and async operations.

Prepare the frontend to send and receive activity data from the backend.

💡 📌 Why Redux Toolkit (RTK)?
✅ Simplifies Redux development by reducing boilerplate code.
✅ Built-in support for thunks → Easy async operations.
✅ Automatically uses Immer for immutable state updates.
✅ Better debugging and DevTools integration.
✅ Redux Query (RTK Query) → Simplified data fetching (we'll add this later).

🚀 1️⃣ Setting Up Redux Store
🔥 🔹 Step 1: Install Redux Toolkit
If you haven't installed it already, run:

bash
Copy
Edit
npm install @reduxjs/toolkit react-redux
✅ Folder structure after adding Redux:

bash
Copy
Edit
📁 src
 ├── 📁 store            # Redux state management
 │       ├── store.js         # Store configuration
 │       ├── activitySlice.js # Redux slice for activity data
 │       ├── apiSlice.js      # Redux slice for backend API
 │── 📁 components
 │── 📁 pages
 │── App.jsx
 │── main.jsx
🔥 🔹 Step 2: Configure the Redux Store
✅ Create the store.js: 📌 src/store/store.js

javascript
Copy
Edit
import { configureStore } from "@reduxjs/toolkit";
import activityReducer from "./activitySlice";
import apiReducer from "./apiSlice";

const store = configureStore({
  reducer: {
    activity: activityReducer,   // Local activity data
    api: apiReducer              // Backend communication
  },
});

export default store;
✅ Wrap the App with the Redux Provider 📌 src/main.jsx

javascript
Copy
Edit
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.jsx";
import { Provider } from "react-redux";
import store from "./store/store.js";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>
);
🚀 2️⃣ Activity Slice for Local State Management
💡 This slice will:
✅ Store activity data fetched from the local storage or backend.
✅ Handle CRUD operations and data normalization.
✅ Manage the loading and error states.

✅ Create the activitySlice.js: 📌 src/store/activitySlice.js

javascript
Copy
Edit
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  activities: [],     // Store activity data
  loading: false,      // Loading indicator
  error: null,         // Store errors
};

const activitySlice = createSlice({
  name: "activity",
  initialState,
  reducers: {
    setActivities: (state, action) => {
      state.activities = action.payload;
    },
    addActivity: (state, action) => {
      state.activities.push(action.payload);
    },
    setLoading: (state, action) => {
      state.loading = action.payload;
    },
    setError: (state, action) => {
      state.error = action.payload;
    },
  },
});

export const { setActivities, addActivity, setLoading, setError } = activitySlice.actions;
export default activitySlice.reducer;
🚀 3️⃣ API Slice with Async Thunks
💡 Why?
✅ To perform async operations (fetching data from backend) using Redux Thunks.
✅ Store API responses in Redux state.
✅ Handle loading and error states efficiently.

✅ Create the apiSlice.js: 📌 src/store/apiSlice.js

javascript
Copy
Edit
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import axios from "axios";

const BACKEND_URL = "https://your-backend.onrender.com/api/usage";

// Async thunk to fetch activity data from the backend
export const fetchActivities = createAsyncThunk(
  "api/fetchActivities",
  async (_, { rejectWithValue }) => {
    try {
      const response = await axios.get(`${BACKEND_URL}/daily`);
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

const apiSlice = createSlice({
  name: "api",
  initialState: {
    data: [],
    loading: false,
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchActivities.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchActivities.fulfilled, (state, action) => {
        state.loading = false;
        state.data = action.payload;
      })
      .addCase(fetchActivities.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      });
  },
});

export default apiSlice.reducer;
🚀 4️⃣ Triggering API Calls & Redux Integration
✅ To fetch and store activity data when the Dashboard mounts.
✅ Handle loading and errors with clean UI feedback.

✅ src/pages/Dashboard.jsx:

javascript
Copy
Edit
import React, { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchActivities } from "../store/apiSlice";
import Loader from "../components/Loader";

const Dashboard = () => {
  const dispatch = useDispatch();
  const { data, loading, error } = useSelector((state) => state.api);

  useEffect(() => {
    dispatch(fetchActivities());  // Fetch data on mount
  }, [dispatch]);

  if (loading) return <Loader />;
  if (error) return <p className="text-red-500">Error: {error}</p>;

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-4">Activity Dashboard</h1>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {data.map((item, index) => (
          <div key={index} className="bg-white shadow p-4 rounded-lg">
            <p><strong>App:</strong> {item.app}</p>
            <p><strong>Title:</strong> {item.title}</p>
            <p><strong>Duration:</strong> {item.duration} seconds</p>
            <p><strong>Date:</strong> {item.date}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Dashboard;
✅ 5️⃣ Components & Reusability
💡 Goal:

Create reusable components for better maintainability.

Display data with cards, tables, and charts.

Handle loading and error states gracefully.

✅ Create a reusable Loader.jsx:

javascript
Copy
Edit
import React from "react";

const Loader = () => {
  return (
    <div className="flex justify-center items-center min-h-screen">
      <div className="animate-spin rounded-full h-12 w-12 border-t-4 border-blue-500"></div>
    </div>
  );
};

export default Loader;
🎯 🔥 Phase 2 Achievements
✅ Redux-powered state management → Efficient and centralized.
✅ Async data fetching with Thunks → Cleanly handling async operations.
✅ Modular architecture → Easily scalable.
✅ Reusable components → Cleaner and faster UI development.



✅ Switch to pnpm → For long-term stability and better dependency management


Why We Use Error Boundaries
Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of crashing the entire application. They work like JavaScript catch {} blocks, but for components.

Key Reasons to Use Error Boundaries:
Prevent Complete App Crashes
Without error boundaries, a single error in any component can break your entire application.

Better User Experience
Instead of seeing a blank screen or broken UI, users see a friendly error message.

Error Logging
You can log errors to your error reporting service (like Sentry) in the componentDidCatch method.

Isolate Problems
Errors in one part of the UI won't affect unrelated components.









